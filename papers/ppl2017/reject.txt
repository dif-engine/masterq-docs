この度は第19回プログラミングおよびプログラミング言語ワークショップ(PPL2017)
カテゴリ1へ論文をご投稿頂き，誠にありがとうございました．プログラム委員会による
査読および議論の結果，ご投稿の論文

C言語ヘッダからのATS言語関数シグニチャの自動生成と段階的な線形型の導入

は，残念ながら不採録と決定いたしました．

査読レポートが今後のご研究のお役に立つことを願っております．

PPL2017ではカテゴリ3(ポスター・デモ発表)の募集もしております．
ご同僚・お知り合いの方々を含め，こちらへの投稿もご検討いただければ幸いです．
カテゴリ3の申し込み締め切りは2月8日(水) 17:00(JST)となっております．
投稿はEasyChairからとなっております．

https://easychair.org/conferences/?conf=ppl2017

以上，よろしくお願いいたします．

PPL2017プログラム共同委員長 番原 睦則・篠埜 功


----------------------- REVIEW 1 ---------------------
PAPER: 1
TITLE: C言語ヘッダからのATS言語関数シグニチャの自動生成と段階的な線形型の導入
AUTHORS: 究 岡部

Overall evaluation: -1

----------- Overall evaluation -----------
論文の概要：

ATS言語はXiらによって開発されている線形型と依存型を備えたプログラミン
グ言語である．線形型によってプログラムがメモリ等のリソースを安全に使用
していることを保証でき，依存型によって関数の機能的な仕様を記述すること
が可能である．ATSプログラムからC言語で記述された関数を使用するためには，
その関数のATSにおける型を手動で宣言する必要がある．本論文では，C言語ヘッ
ダファイルを解析することにより，これらの宣言を自動生成するツールc2ats
の概要が説明されている．c2atsによって生成された宣言をさらにユーザによっ
てrefineすることで，C言語で実装された関数をATSプログラムから呼び出すこ
とができる．fopen/fread/fcloseを呼び出すATSプログラムを例にとって，ツー
ルを用いた開発の概要が示されている．

主なコメント：

提出された論文では，以下の二点に大きな不満がある．

・本手法の利点が説得的に説明されていない．

c2atsはCの関数プロトタイプ宣言からATSの型のいわばテンプレートを生成す
る．著者が述べるように，プロトタイプ宣言からはATSの型に記述すべき情報
が十分に推論できないので，このテンプレートをそのまま用いることはできな
い．そのため，生成されたテンプレートをユーザが結局手動で編集しなければ
ならない．著者は1節において手動でATSの型を記述することで誤りが混入しや
すいと述べているが，c2atsが結局手動でのrefinementを必要とするならば，
提案手法はいかなる点において有利なのだろうか．

また，5節におけるc2atsを用いたATSプログラム開発のワークフロー例からは，
結局呼び出すライブラリ関数のラッパを手動で記述する必要があることが読み
取れる（リスト21）が，このラッパの開発で誤りが混入する可能性は無いのだ
ろうか．

この点について，著者は最終的なプログラムが__consume_view等の「危険な」
ATSプリミティブを含まないようになれば安全であると主張しているようにも
読めるが，これは正しいだろうか．ライブラリ関数のATS型宣言が誤っている
場合には，プログラムが危険なプログラムを含まなくとも，メモリエラーを起
こしうるようにも思える．

・2節におけるATSの概要の説明が非常にわかりにくい．

この節は説明の体を成していない．「静的な値」「証明の値」などの定義され
ないままに使われている用語が多い．またそれらがどのようにATS内で使われ
ているかの説明がなされていない．観や駐観（view と viewtype の訳語であ
ろうが，原文との対応が非常に取りづらいので，原語も示されたい）の線形性
がどのようにリソース使用の静的検証に用いられているかも説明されていない．
（2.2節の消費・生成の説明は線形型を知らない者には通じないと思われる．）
この状態のままでは論文の読者，特に学生に有害であるとさえ思えるので，本
論文が accept される場合には全面的に書き直すことを強く求める．なお，前
者の用語については，ATS言語のチュートリアル
（http://ats-lang.sourceforge.net/DOCUMENT/INT2PROGINATS/PDF/main.pdf）
ではstatic valueという用語は使われていない．Static term の訳語であるな
らば「静的な式」と訳すべきところである．

その他のコメント：

* 全体

論文が「です・ます調」で書かれていることに違和感を覚える．また，論文と
して見たときに，不明確な表現や用語の不適切な使用が散見される．例えば1
節の第一段落だけをとってみても以下のような問題がある．

-「近年プログラミング言語の進化はめざましく，ガベージコレクション/型推
  論/関数型プログラミングのような機能をそなえた言語を用いて．．．」：
  これらの機能がプログラミング言語に導入されたのは「近年」のことではな
  いのではないか．

-「ハードウェアに近い領域でのプログラミングでは C 言語を用いた開発を余
  儀なくされています．」：誰が誰によって余儀なくされているのか，また
  「余儀なくされている」という表現にはネガティブな価値判断が含まれるが
  その価値判断はどのように正当化されるのか．

-「その設計は．．．」の「その」の指す対象が不明確である．

-「バッファオーバーフローのようなメモリ破壊やリソースリークのような不
  具合．．．」：このように書くと「メモリ破壊」は「不具合」に含まれない
  ようにも聞こえる．「バッファオーバーフローやリソースリークなどの不具
  合」でよいのではないか．

-「C言語の機能は一般的な関数型言語よりも貧弱．．．」：「貧弱」というネ
  ガティブな価値判断を含む表現はどのように正当化されるのか．メモリを自
  由に操作したいプログラマからすれば一般的な関数型言語の方が貧弱であろ
  う．

-「代数的データ型のような今日一般的な機能でさえ．．．」：「代数的デー
 タ型のような機能」が何を指すのか不明確．C言語でも構造体を用いれば同様
 の計算は可能である．おそらく代数的データ型を定義し，その型の値を構築
 し，またその型の値を使用することを意図しているのだろうが，そもそもな
 ぜここで唐突に代数的データ型が出て来るのか．

これらの表現の問題が論文を通じて多く，それらを一つ一つ指摘することは難
しいので，以降のコメントでは表現の問題には触れない．

* ATSを知らない者にとっては，リスト1の型は読めないと考える．

* string2ptr と ptr_vtake が何をする関数かは説明されるべきであろう．

* リスト9において，fpfat は何をする関数なのか．

* 「リスト9のATSコードは以下の点で危険です」：これらがなぜ危険なのかが，
  ここまでの説明からは読み取れない．これらはATSの型付けの問題であり，
  これらがバッファオーバーランやメモリリークを起こすわけではないように
  思えるのだが．（unsafe.sats のインポートや，ptr_vtake の使用が，危険
  なコードを型付け可能にしてしまう，というのであれば理解できなくもな
  い．）

* リスト21：string_tabulate 等，説明無しに使われている関数があり，読み
  にくい．

* 6.2節：agzが説明無しに使われている．

* 8節，「C言語の関数宣言ではなく関数本体を．．．」：なぜこれをサポート
  する必要があるのだろうか．レガシーのCコードをインポートできるように
  型を記述するのを支援するのが目的だったのではないのか．

* 「gotoのないC言語コードは．．．」：なぜここでこの問題が論じられてい
  るのかわからない．


----------------------- REVIEW 2 ---------------------
PAPER: 1
TITLE: C言語ヘッダからのATS言語関数シグニチャの自動生成と段階的な線形型の導入
AUTHORS: 究 岡部

Overall evaluation: -2

----------- Overall evaluation -----------
本論文は2つのことについて述べている．ひとつはC言語のヘッダファイルから
C関数をATS言語にインポートするコードを自動生成するc2atsの紹介，もうひ
とつはATS言語にインポートしたC関数に証明を加える事例の紹介である．本論
文が主張する貢献は，自動インポートによる人為的ミスの削減である．

本論文を研究としての新規性や技術的貢献を評価することは難しい．本論文を
評価する一つの軸は，本論文が主張する人為的ミスの削減の度合いであるが，
具体的にどのようなミスをどの程度削減できるのか主張も評価もされていない
うえ，自動生成したコードの大部分を結局手で書き換えているため，この軸で
の評価は難しい．もうひとつの評価軸は実装論文としての貢献であるが，c2ats
の実装報告として読んだとしても，C関数をATS言語にインポートすることの困
難さやその課題を克服するアイディア，ツールの仕様の妥当性や有用性などに
ついての主張はほとんど示されておらず（c2atsの設計に関する説明は4節
（2ページ）のみである），またツールが実際にどのように実装されたのかも
明確でない．ツール自体の新規性も，9節で著者自ら述べている通り，主張する
ことは難しい．従って実装論文としての評価も難しい．結局，本論文が何を
どこまで解決しようとしているのか不明瞭であり，カテゴリ1論文としての
採択のバーには達していないと判断せざるを得ない．

C関数をCより強力な型を持つ言語に自動的にインポートしたいという動機は，
ごく自然なものである．しかし，強力な言語から見てCの型は多くの場合情報
が不足しており，その情報は何らかの形で補わなければならない．あるいは，
型安全性や処理系の都合でそもそもインポートできない場合もあり得る．この
ようなギャップを如何に埋めるか（自動/手動による情報の補完や，あるいは
対策をしなくても有用であることを主張するなど）というところに，外部関数
インターフェースや自動的インポートツールを工夫する余地がある．本論文で
は関連研究としてc2hsしか挙げられていないが，関数型言語に限っても，
SML/NJのnlffi，MLtonやSML#の_importなど，強力なC関数インターフェースを
持つ言語は存在し，それぞれが独自の視点で分析と工夫を行っている．
本稿がもし，ATS言語から見たC関数の分析，インポートする際の課題とその
対応，ユーザーに証明項をスムーズに書かせるための（ツールとしての）工夫
などに重点を置いて書かれていたならば，研究として興味深い内容になってい
たと思われる．

以下は本論文に関するコメントである．

* 一度安全でないプログラムを書かせてから安全にするアプローチは，センス
が良いように思えない．安全でない言語機能の使用が残っていることをコンパ
イラは検査できず，人間が管理しなければならないからである．それよりは，
最初からunsafeなど使わずに，安全なC関数のバインディングをいきなり書かせ
るほうがずっといい．そうすることが極端に大変ならば，それを解決すること
にこそ研究としての価値がある．

* プログラムリストは適切なフォントを選び，適切な改行とインデントを入れ
て，読みやすく整形することが望ましい．例えばリスト16などは，ATS言語に
不慣れな読者にはどの要素がどこで切れているのか判別が難しく，またlと1も
区別しにくい．


----------------------- REVIEW 3 ---------------------
PAPER: 1
TITLE: C言語ヘッダからのATS言語関数シグニチャの自動生成と段階的な線形型の導入
AUTHORS: 究 岡部

Overall evaluation: -1

----------- Overall evaluation -----------
ATS言語とはC言語に代わるものとして，線形型（＋依存型と思われる）を用いて
型安全な言語であり，本論文の著者も日本語などの面で関係しているようであ
る．本論文は，タイトルのとおり，「C言語ヘッダからのATS言語関数シグニチャ
の自動生成」と「段階的な線形型の導入」である．前者は c2ats というツール
を提案，開発しており，後者の「段階的な線形型の導入」は手動である．

第一印象は，研究論文というよりツールの使い方の紹介記事である．ATS言語
の「紹介」から始まり，c2ats ツールの利用法，プリミティブ型の単純な話，
ポインタに関してC言語に起因する限界と想定を説明している．その後，fread,
fopen, fclose を例に，手動で「段階的な線形型の導入」している．

ATS言語のような安全な言語は重要であり，c2ats のツールとしての有用性
と必要性は理解できる．一方で，ツールには技術的貢献はあまりない．
freadの例は興味深いが，後述するように問題があり，採択には修正か補足が
必要であると判断し，総合評価はボーダーを少し下回るとした．

以下，判断理由を補足する．

c2ats については，C言語(ヘッダ)の構文解析が面倒だったと思われるが，
既存技術である．型や関数の表現に関しする変換も想定しているものが単純
であり，特に難しいところはない．
c2ats が生成してくれるファイルは足場として有用であるというはその通りと
思う．その動機も理解できる．
後者の「段階的な線形型の導入」で何か自動推論や，手動としても検証など
あると面白いが，そういうものはない．

freadの例が，本論文でもっとも興味深い貢献になり得る点であろう．
しかし，これは手動であるため，「ATS言語ではこういうふうに書ける」
ということを示した程度に感じられた．

また，fread の例は，バイト列あるいは文字(char)の列として読み込ん
だ部分をその長さに依存したstrnptr としているが，読み込む前にあら
かじめ準備してあった長さの配列のままで，読み込んだ部分も部分文字列
ととらえるべきように思う．意見の相違かもしれないが，すくなくとも
メモリ管理としては（freeされるのは）読み込んでない部分を含めた
配列全体だと思われる．採録のためには，この部分を修正するか，すくなく
ともメモリ管理の単位と fread の単位に差があることを言及すべきである．
